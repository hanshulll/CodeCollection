#include <stdio.h>
#include <stdlib.h>
 
// A Linked List Node
struct Node
{
    int data;
    struct Node* next;
};
 
// Helper function to create a new node with the given data and
// pushes it onto the list's front
void push(struct Node** head, int data)
{
    // create a new linked list node from the heap
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 
    newNode->data = data;
    newNode->next = *head;
    *head = newNode;
}
 
// Helper function to print a given linked list
void printList(struct Node* head)
{
    struct Node* ptr = head;
    while (ptr)
    {
        printf("%d â€”> ", ptr->data);
        ptr = ptr->next;
    }
 
    printf("null");
}
 
void deleteNodes(struct Node *head, int m, int n)
{
    // base case
    if (head == NULL || head->next == NULL) {
        return;
    }
 
    struct Node *prev = NULL, *next = NULL;
    struct Node* curr = head;
 
    // skip `m` nodes
    for (int i = 1; curr && i <= m; i++)
    {
        prev = curr;
        curr = curr->next;
    }
 
    // delete next `n` nodes
    for (int i = 1; curr && i <= n; i++)
    {
        next = curr->next;
        free(curr);
        curr = next;
    }
 
    // link remaining nodes with the last node
    prev->next = curr;
 
    // recur for remaining nodes
    deleteNodes(curr, m, n);
}
 
int main(void)
{
    // input keys
    int keys[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int n = sizeof(keys) / sizeof(keys[0]);
 
    struct Node* head = NULL;
    for (int i = n - 1; i >= 0; i--) {
        push(&head, keys[i]);
    }
 
    deleteNodes(head, 1, 3);
    printList(head);
 
    return 0;
}


